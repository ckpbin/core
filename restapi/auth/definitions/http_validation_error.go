// Code generated by go-swagger; DO NOT EDIT.

package definitions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HTTPValidationError Http validation error
//
// swagger:model HttpValidationError
type HTTPValidationError struct {
	HTTPError

	// List of errors received while validating payload against schema
	// Required: true
	ValidationErrors []*HTTPValidationErrorDetail `json:"validationErrors"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *HTTPValidationError) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 HTTPError
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.HTTPError = aO0

	// now for regular properties
	var propsHTTPValidationError struct {
		ValidationErrors []*HTTPValidationErrorDetail `json:"validationErrors"`
	}
	if err := swag.ReadJSON(raw, &propsHTTPValidationError); err != nil {
		return err
	}
	m.ValidationErrors = propsHTTPValidationError.ValidationErrors

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m HTTPValidationError) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.HTTPError)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsHTTPValidationError struct {
		ValidationErrors []*HTTPValidationErrorDetail `json:"validationErrors"`
	}
	propsHTTPValidationError.ValidationErrors = m.ValidationErrors

	jsonDataPropsHTTPValidationError, errHTTPValidationError := swag.WriteJSON(propsHTTPValidationError)
	if errHTTPValidationError != nil {
		return nil, errHTTPValidationError
	}
	_parts = append(_parts, jsonDataPropsHTTPValidationError)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this Http validation error
func (m *HTTPValidationError) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with HTTPError
	if err := m.HTTPError.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidationErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPValidationError) validateValidationErrors(formats strfmt.Registry) error {

	if err := validate.Required("validationErrors", "body", m.ValidationErrors); err != nil {
		return err
	}

	for i := 0; i < len(m.ValidationErrors); i++ {
		if swag.IsZero(m.ValidationErrors[i]) { // not required
			continue
		}

		if m.ValidationErrors[i] != nil {
			if err := m.ValidationErrors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("validationErrors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this Http validation error based on the context it is used
func (m *HTTPValidationError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with HTTPError
	if err := m.HTTPError.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValidationErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPValidationError) contextValidateValidationErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ValidationErrors); i++ {

		if m.ValidationErrors[i] != nil {
			if err := m.ValidationErrors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("validationErrors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *HTTPValidationError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPValidationError) UnmarshalBinary(b []byte) error {
	var res HTTPValidationError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
