// Code generated by go-swagger; DO NOT EDIT.

package definitions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostPasswordChange post password change
//
// swagger:model PostPasswordChange
type PostPasswordChange struct {

	// new password
	// Required: true
	NewPassword *string `json:"new_password"`

	// new password confirm
	// Required: true
	NewPasswordConfirm *string `json:"new_password_confirm"`

	// password
	// Required: true
	Password *string `json:"password"`

	// token
	// Required: true
	// Format: uuid
	Token *strfmt.UUID `json:"token"`
}

// Validate validates this post password change
func (m *PostPasswordChange) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNewPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewPasswordConfirm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostPasswordChange) validateNewPassword(formats strfmt.Registry) error {

	if err := validate.Required("new_password", "body", m.NewPassword); err != nil {
		return err
	}

	return nil
}

func (m *PostPasswordChange) validateNewPasswordConfirm(formats strfmt.Registry) error {

	if err := validate.Required("new_password_confirm", "body", m.NewPasswordConfirm); err != nil {
		return err
	}

	return nil
}

func (m *PostPasswordChange) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *PostPasswordChange) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("token", "body", m.Token); err != nil {
		return err
	}

	if err := validate.FormatOf("token", "body", "uuid", m.Token.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post password change based on context it is used
func (m *PostPasswordChange) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PostPasswordChange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostPasswordChange) UnmarshalBinary(b []byte) error {
	var res PostPasswordChange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
