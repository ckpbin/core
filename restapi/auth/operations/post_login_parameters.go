// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/ckpbin/response"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/labstack/echo/v4"

	"github.com/ckpbin/swagger/restapi/auth/definitions"
)

// PostLoginEndpoint executes the core logic of the related
// route endpoint.
func PostLoginEndpoint(handler func(c echo.Context, params *PostLoginParams) *response.Response) echo.HandlerFunc {
	return func(c echo.Context) error {
		// generate params from request
		params := NewPostLoginParams()
		problem := response.Problem{}
		if err := params.readRequest(c); err != nil {
			switch e := err.(type) {
			case *errors.CompositeError:
				problem = response.Problem{
					Title:  http.StatusText(int(e.Code())),
					Status: int(e.Code()),
					Detail: response.FormatErrors(e),
				}
			default:
				problem = response.Problem{
					Title:  http.StatusText(http.StatusBadRequest),
					Status: http.StatusBadRequest,
					Detail: "Unrecognized http error",
				}
			}

			return c.JSON(problem.Status, problem)
		}

		resp := handler(c, params)

		switch resp.Code {
		case http.StatusNoContent:
			return c.JSON(resp.Code, nil)
		default:
			return c.JSON(resp.Code, resp.Body)
		}
	}
}

// NewPostLoginParams creates a new PostLoginParams object
// with the default values initialized.
func NewPostLoginParams() *PostLoginParams {
	var ()
	return &PostLoginParams{}
}

// PostLoginParams contains all the bound params for the post login operation
// typically these are obtained from a http.Request
//
// swagger:parameters postLogin
type PostLoginParams struct {

	/*
	  In: body
	*/
	Payload *definitions.PostLogin
}

// readRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *PostLoginParams) readRequest(ctx echo.Context) error {
	var res []error
	formats := strfmt.NewFormats()

	if runtime.HasBody(ctx.Request()) {
		var body definitions.PostLogin
		if err := ctx.Bind(&body); err != nil {
			res = append(res, errors.NewParseError("payload", "body", "", err))
		} else {
			if err := body.Validate(formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Payload = &body
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// vim: ft=go
