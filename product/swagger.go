// Code generated by go-swagger; DO NOT EDIT.

package product

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Product to store information about product.",
    "title": "Product Service",
    "version": "0.0.1"
  },
  "host": "localhost:8080",
  "basePath": "/",
  "paths": {
    "/products": {
      "get": {
        "operationId": "getProducts",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/order_by"
          },
          {
            "$ref": "#/parameters/prev_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Show all list products",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "HttpError": {
      "type": "object",
      "required": [
        "status",
        "type",
        "title"
      ],
      "properties": {
        "detail": {
          "description": "More detailed, human-readable, optional explanation of the error",
          "type": "string",
          "example": "User is lacking permission to access this resource"
        },
        "status": {
          "description": "HTTP status code returned for the error",
          "type": "integer",
          "maximum": 599,
          "minimum": 100,
          "x-go-name": "Code",
          "example": 403
        },
        "title": {
          "description": "Short, human-readable description of the error",
          "type": "string",
          "example": "Forbidden"
        },
        "type": {
          "description": "Type of error returned, should be used for client-side error handling",
          "type": "string",
          "example": "generic"
        }
      }
    },
    "HttpValidationError": {
      "type": "object",
      "required": [
        "validationErrors"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/HttpError"
        }
      ],
      "properties": {
        "validationErrors": {
          "description": "List of errors received while validating payload against schema",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HttpValidationErrorDetail"
          }
        }
      }
    },
    "HttpValidationErrorDetail": {
      "type": "object",
      "required": [
        "key",
        "in",
        "error"
      ],
      "properties": {
        "error": {
          "description": "Error describing field validation failure",
          "type": "string"
        },
        "in": {
          "description": "Indicates how the invalid field was provided",
          "type": "string"
        },
        "key": {
          "description": "Key of field failing validation",
          "type": "string"
        }
      }
    },
    "Product": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "limit": {
      "maximum": 50,
      "minimum": 10,
      "type": "integer",
      "default": 20,
      "name": "limit",
      "in": "query"
    },
    "offset": {
      "type": "integer",
      "default": 0,
      "name": "offset",
      "in": "query"
    },
    "order_by": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "order_by",
      "in": "query"
    },
    "prev_page": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "prev_page",
      "in": "query",
      "allowEmptyValue": true
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Product to store information about product.",
    "title": "Product Service",
    "version": "0.0.1"
  },
  "host": "localhost:8080",
  "basePath": "/",
  "paths": {
    "/products": {
      "get": {
        "operationId": "getProducts",
        "parameters": [
          {
            "maximum": 50,
            "minimum": 10,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "prev_page",
            "in": "query",
            "allowEmptyValue": true
          }
        ],
        "responses": {
          "200": {
            "description": "Show all list products",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "HttpError": {
      "type": "object",
      "required": [
        "status",
        "type",
        "title"
      ],
      "properties": {
        "detail": {
          "description": "More detailed, human-readable, optional explanation of the error",
          "type": "string",
          "example": "User is lacking permission to access this resource"
        },
        "status": {
          "description": "HTTP status code returned for the error",
          "type": "integer",
          "maximum": 599,
          "minimum": 100,
          "x-go-name": "Code",
          "example": 403
        },
        "title": {
          "description": "Short, human-readable description of the error",
          "type": "string",
          "example": "Forbidden"
        },
        "type": {
          "description": "Type of error returned, should be used for client-side error handling",
          "type": "string",
          "example": "generic"
        }
      }
    },
    "HttpValidationError": {
      "type": "object",
      "required": [
        "validationErrors"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/HttpError"
        }
      ],
      "properties": {
        "validationErrors": {
          "description": "List of errors received while validating payload against schema",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HttpValidationErrorDetail"
          }
        }
      }
    },
    "HttpValidationErrorDetail": {
      "type": "object",
      "required": [
        "key",
        "in",
        "error"
      ],
      "properties": {
        "error": {
          "description": "Error describing field validation failure",
          "type": "string"
        },
        "in": {
          "description": "Indicates how the invalid field was provided",
          "type": "string"
        },
        "key": {
          "description": "Key of field failing validation",
          "type": "string"
        }
      }
    },
    "Product": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "limit": {
      "maximum": 50,
      "minimum": 10,
      "type": "integer",
      "default": 20,
      "name": "limit",
      "in": "query"
    },
    "offset": {
      "minimum": 0,
      "type": "integer",
      "default": 0,
      "name": "offset",
      "in": "query"
    },
    "order_by": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "order_by",
      "in": "query"
    },
    "prev_page": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "prev_page",
      "in": "query",
      "allowEmptyValue": true
    }
  }
}`))
}
